/**
 * Servi√ßo para envio de notifica√ß√µes via WhatsApp
 * Centraliza envio de mensagens formatadas e diferentes tipos de notifica√ß√µes
 */
const logger = require('../utils/logger');
const formatter = require('../utils/formatter');
const fs = require('fs').promises;
const path = require('path');
const { MessageMedia } = require('whatsapp-web.js');
const config = require('../config/config');

// Cache para controle de frequ√™ncia de envio
const notificationCache = new Map();
const THROTTLE_PERIOD_MS = 4 * 60 * 60 * 1000; // 4 horas para notifica√ß√µes do mesmo tipo

// Tipos de notifica√ß√µes
const NOTIFICATION_TYPES = {
    INFO: 'info',
    WARNING: 'warning',
    ALERT: 'alert',
    PROMOTION: 'promotion',
    APPOINTMENT: 'appointment',
    PAYMENT: 'payment',
    SYSTEM: 'system',
    FEEDBACK: 'feedback'
};

// Templates de notifica√ß√µes
const TEMPLATES = {
    [NOTIFICATION_TYPES.INFO]: {
        prefix: '‚ÑπÔ∏è *Informa√ß√£o*\n\n',
        suffix: '\n\nResponda qualquer mensagem para falar com um atendente.'
    },
    [NOTIFICATION_TYPES.WARNING]: {
        prefix: '‚ö†Ô∏è *Aviso Importante*\n\n',
        suffix: '\n\nResponda esta mensagem caso precise de assist√™ncia.'
    },
    [NOTIFICATION_TYPES.ALERT]: {
        prefix: 'üö® *ALERTA*\n\n',
        suffix: '\n\nEste √© um alerta que requer sua aten√ß√£o imediata.'
    },
    [NOTIFICATION_TYPES.PROMOTION]: {
        prefix: 'üéÅ *Oferta Especial*\n\n',
        suffix: '\n\nOferta v√°lida por tempo limitado. Responda "EU QUERO" para aproveitar.'
    },
    [NOTIFICATION_TYPES.APPOINTMENT]: {
        prefix: 'üìÖ *Lembrete de Agendamento*\n\n',
        suffix: '\n\nResponda "CONFIRMAR" para confirmar sua presen√ßa ou "REAGENDAR" para alterar.'
    },
    [NOTIFICATION_TYPES.PAYMENT]: {
        prefix: 'üí∞ *Informa√ß√£o de Pagamento*\n\n',
        suffix: '\n\nEm caso de d√∫vidas, responda esta mensagem.'
    },
    [NOTIFICATION_TYPES.SYSTEM]: {
        prefix: 'üîß *Sistema*\n\n',
        suffix: ''
    },
    [NOTIFICATION_TYPES.FEEDBACK]: {
        prefix: '‚≠ê *Feedback*\n\n',
        suffix: '\n\nSua opini√£o √© muito importante para melhorarmos nossos servi√ßos.'
    }
};

/**
 * Verifica se um n√∫mero est√° no formato correto para WhatsApp
 * @param {string} number - N√∫mero a ser validado
 * @returns {string} N√∫mero formatado para WhatsApp
 */
const validateAndFormatNumber = (number) => {
    // Remover caracteres n√£o num√©ricos
    let cleaned = number.replace(/\D/g, '');
    
    // Verificar se j√° tem o sufixo do WhatsApp
    if (cleaned.endsWith('@c.us')) {
        return cleaned;
    }
    
    // Verificar se tem o formato correto
    if (cleaned.length < 10) {
        throw new Error(`N√∫mero de telefone inv√°lido: ${number}`);
    }
    
    // Adicionar sufixo do WhatsApp
    return `${cleaned}@c.us`;
};

/**
 * Verifica se uma notifica√ß√£o deve ser throttled com base no receptor e tipo
 * @param {string} to - Destinat√°rio
 * @param {string} type - Tipo de notifica√ß√£o
 * @returns {boolean} Verdadeiro se deve ser throttled
 */
const shouldThrottle = (to, type) => {
    // Verificar se existem notifica√ß√µes recentes para este n√∫mero+tipo
    const cacheKey = `${to}_${type}`;
    const lastNotification = notificationCache.get(cacheKey);
    
    if (lastNotification) {
        const elapsed = Date.now() - lastNotification;
        // Se j√° enviou uma notifica√ß√£o deste tipo h√° menos de X horas
        return elapsed < THROTTLE_PERIOD_MS;
    }
    
    return false;
};

/**
 * Registra o envio de uma notifica√ß√£o para controle de throttling
 * @param {string} to - Destinat√°rio
 * @param {string} type - Tipo de notifica√ß√£o
 */
const registerNotification = (to, type) => {
    const cacheKey = `${to}_${type}`;
    notificationCache.set(cacheKey, Date.now());
    
    // Limpar cache periodicamente
    if (notificationCache.size > 1000) {
        // Remover entradas antigas
        const now = Date.now();
        for (const [key, timestamp] of notificationCache.entries()) {
            if (now - timestamp > THROTTLE_PERIOD_MS) {
                notificationCache.delete(key);
            }
        }
    }
};

/**
 * Carrega uma imagem como MessageMedia
 * @param {string} filename - Nome do arquivo
 * @returns {Promise<MessageMedia>} Objeto MessageMedia
 */
const loadMedia = async (filename) => {
    try {
        const mediaPath = path.join(__dirname, '..', '..', 'media', filename);
        const data = await fs.readFile(mediaPath);
        const mimetype = getMimeType(filename);
        
        return new MessageMedia(mimetype, data.toString('base64'), filename);
    } catch (error) {
        logger.error(`Erro ao carregar m√≠dia ${filename}:`, error);
        throw error;
    }
};

/**
 * Obt√©m o MIME type com base na extens√£o do arquivo
 * @param {string} filename - Nome do arquivo
 * @returns {string} MIME type
 */
const getMimeType = (filename) => {
    const ext = path.extname(filename).toLowerCase();
    
    switch (ext) {
        case '.jpg':
        case '.jpeg':
            return 'image/jpeg';
        case '.png':
            return 'image/png';
        case '.gif':
            return 'image/gif';
        case '.pdf':
            return 'application/pdf';
        case '.mp4':
            return 'video/mp4';
        case '.mp3':
            return 'audio/mpeg';
        default:
            return 'application/octet-stream';
    }
};

/**
 * Envia notifica√ß√£o com template formatado baseado no tipo
 * @param {Object} client - Cliente WhatsApp
 * @param {string} to - Destinat√°rio
 * @param {string} message - Corpo da mensagem
 * @param {string} type - Tipo de notifica√ß√£o
 * @param {Object} options - Op√ß√µes adicionais
 * @returns {Promise<Object>} Resultado do envio
 */
const sendTemplateNotification = async (client, to, message, type = NOTIFICATION_TYPES.INFO, options = {}) => {
    try {
        // Validar n√∫mero do destinat√°rio
        const formattedNumber = validateAndFormatNumber(to);
        
        // Verificar throttle com base no tipo e destinat√°rio
        if (options.throttle !== false && shouldThrottle(formattedNumber, type)) {
            logger.info(`Notifica√ß√£o do tipo ${type} para ${formattedNumber} throttled (j√° enviado recentemente)`);
            return { throttled: true };
        }
        
        // Selecionar o template com base no tipo
        const template = TEMPLATES[type] || TEMPLATES[NOTIFICATION_TYPES.INFO];
        
        // Formata√ß√£o da mensagem
        let formattedMessage = `${template.prefix}${message}${template.suffix}`;
        
        // Adicionar rodap√© se configurado
        if (config.messageFooter && type !== NOTIFICATION_TYPES.SYSTEM) {
            formattedMessage += `\n\n${config.messageFooter}`;
        }
        
        // Enviar a mensagem
        let result;
        
        if (options.media) {
            // Enviar com m√≠dia
            const media = await loadMedia(options.media);
            result = await client.sendMessage(formattedNumber, media, { caption: formattedMessage });
        } else {
            // Enviar apenas texto
            result = await client.sendMessage(formattedNumber, formattedMessage);
        }
        
        // Registrar para throttle
        registerNotification(formattedNumber, type);
        
        logger.info(`Notifica√ß√£o do tipo ${type} enviada para ${formattedNumber}`);
        return { success: true, messageId: result.id._serialized };
        
    } catch (error) {
        logger.error(`Erro ao enviar notifica√ß√£o para ${to}:`, error);
        throw error;
    }
};

/**
 * Envia notifica√ß√£o em massa para m√∫ltiplos destinat√°rios
 * @param {Object} client - Cliente WhatsApp
 * @param {Array<string>} recipients - Lista de destinat√°rios
 * @param {string} message - Corpo da mensagem
 * @param {string} type - Tipo de notifica√ß√£o
 * @param {Object} options - Op√ß√µes adicionais
 * @returns {Promise<Object>} Resultado do envio em massa
 */
const sendBulkNotification = async (client, recipients, message, type = NOTIFICATION_TYPES.INFO, options = {}) => {
    const results = {
        total: recipients.length,
        success: 0,
        failed: 0,
        throttled: 0,
        errors: []
    };
    
    // Limitar taxa de envio para evitar bloqueio
    const BATCH_SIZE = 10;
    const DELAY_BETWEEN_BATCHES_MS = 5000; // 5 segundos entre lotes
    const DELAY_BETWEEN_MESSAGES_MS = 1000; // 1 segundo entre mensagens
    
    // Dividir em lotes
    for (let i = 0; i < recipients.length; i += BATCH_SIZE) {
        const batch = recipients.slice(i, i + BATCH_SIZE);
        
        // Processar cada lote
        for (const recipient of batch) {
            try {
                const result = await sendTemplateNotification(client, recipient, message, type, options);
                
                if (result.throttled) {
                    results.throttled++;
                } else {
                    results.success++;
                }
                
                // Aguardar entre cada mensagem
                if (batch.indexOf(recipient) < batch.length - 1) {
                    await new Promise(resolve => setTimeout(resolve, DELAY_BETWEEN_MESSAGES_MS));
                }
                
            } catch (error) {
                results.failed++;
                results.errors.push({
                    recipient,
                    error: error.message
                });
                
                logger.error(`Erro ao enviar notifica√ß√£o em massa para ${recipient}:`, error);
            }
        }
        
        // Aguardar entre lotes
        if (i + BATCH_SIZE < recipients.length) {
            await new Promise(resolve => setTimeout(resolve, DELAY_BETWEEN_BATCHES_MS));
        }
    }
    
    logger.info(`Notifica√ß√£o em massa enviada: ${results.success} sucesso, ${results.failed} falhas, ${results.throttled} throttled`);
    return results;
};

/**
 * Envia uma notifica√ß√£o de promo√ß√£o com imagem
 * @param {Object} client - Cliente WhatsApp
 * @param {string} to - Destinat√°rio
 * @param {string} title - T√≠tulo da promo√ß√£o
 * @param {string} description - Descri√ß√£o da promo√ß√£o
 * @param {string} price - Pre√ßo promocional
 * @param {string} imageFile - Nome do arquivo de imagem
 * @returns {Promise<Object>} Resultado do envio
 */
const sendPromotionNotification = async (client, to, title, description, price, imageFile) => {
    const message = `*${title}*\n\n${description}\n\n*Pre√ßo promocional:* ${formatter.formatPrice(price)}`;
    
    return sendTemplateNotification(client, to, message, NOTIFICATION_TYPES.PROMOTION, {
        media: imageFile,
        throttle: true
    });
};

/**
 * Envia uma notifica√ß√£o de lembrete de agendamento
 * @param {Object} client - Cliente WhatsApp
 * @param {string} to - Destinat√°rio
 * @param {string} service - Servi√ßo agendado
 * @param {Date} date - Data do agendamento
 * @param {string} time - Hor√°rio do agendamento
 * @returns {Promise<Object>} Resultado do envio
 */
const sendAppointmentReminder = async (client, to, service, date, time) => {
    const formattedDate = formatter.formatDate(date);
    const message = `Seu agendamento de *${service}* est√° confirmado para *${formattedDate}* √†s *${time}*.\n\nPor favor, confirme sua presen√ßa.`;
    
    return sendTemplateNotification(client, to, message, NOTIFICATION_TYPES.APPOINTMENT);
};

/**
 * Envia notifica√ß√£o de feedback ap√≥s conclus√£o de servi√ßo
 * @param {Object} client - Cliente WhatsApp
 * @param {string} to - Destinat√°rio
 * @param {string} service - Servi√ßo realizado
 * @returns {Promise<Object>} Resultado do envio
 */
const sendFeedbackRequest = async (client, to, service) => {
    const message = `Gostar√≠amos de saber sobre sua experi√™ncia com o servi√ßo de *${service}* que realizamos.\n\nAvalie nosso atendimento de 1 a 5 estrelas (sendo 5 o melhor).\n\nSua opini√£o √© muito importante para melhorarmos nossos servi√ßos!`;
    
    return sendTemplateNotification(client, to, message, NOTIFICATION_TYPES.FEEDBACK);
};

/**
 * Envia notifica√ß√£o de informa√ß√£o sobre pagamento
 * @param {Object} client - Cliente WhatsApp
 * @param {string} to - Destinat√°rio
 * @param {string} service - Servi√ßo realizado
 * @param {number} amount - Valor do servi√ßo
 * @param {Array} paymentOptions - Op√ß√µes de pagamento
 * @returns {Promise<Object>} Resultado do envio
 */
const sendPaymentNotification = async (client, to, service, amount, paymentOptions) => {
    const formattedPaymentOptions = paymentOptions.map(option => `‚Ä¢ ${option}`).join('\n');
    
    const message = `Informa√ß√µes de pagamento para o servi√ßo: *${service}*\n\n` +
                    `*Valor:* ${formatter.formatPrice(amount)}\n\n` +
                    `*Formas de pagamento dispon√≠veis:*\n${formattedPaymentOptions}`;
    
    return sendTemplateNotification(client, to, message, NOTIFICATION_TYPES.PAYMENT);
};

/**
 * Envia notifica√ß√£o de alerta t√©cnico
 * @param {Object} client - Cliente WhatsApp
 * @param {string} to - Destinat√°rio
 * @param {string} issue - Problema t√©cnico
 * @param {string} solution - Solu√ß√£o proposta
 * @returns {Promise<Object>} Resultado do envio
 */
const sendTechnicalAlert = async (client, to, issue, solution) => {
    const message = `Detectamos um potencial problema t√©cnico: *${issue}*\n\n` +
                    `*Solu√ß√£o recomendada:*\n${solution}\n\n` +
                    `Deseja agendar um atendimento para resolver este problema?`;
    
    return sendTemplateNotification(client, to, message, NOTIFICATION_TYPES.ALERT);
};

/**
 * Envia uma notifica√ß√£o simples (para compatibilidade com vers√£o anterior)
 * @param {Object} client - Cliente WhatsApp
 * @param {string} to - Destinat√°rio
 * @param {string} notification - Texto da notifica√ß√£o
 * @returns {Promise<Object>} Resultado do envio
 */
const sendNotification = async (client, to, notification) => {
    return sendTemplateNotification(client, to, notification, NOTIFICATION_TYPES.INFO);
};

// Exportar fun√ß√µes
module.exports = {
    // Fun√ß√£o original para compatibilidade
    sendNotification,
    
    // Fun√ß√£o principal com templates
    sendTemplateNotification,
    
    // Fun√ß√£o para envio em massa
    sendBulkNotification,
    
    // Fun√ß√µes especializadas
    sendPromotionNotification,
    sendAppointmentReminder,
    sendFeedbackRequest,
    sendPaymentNotification,
    sendTechnicalAlert,
    
    // Tipos de notifica√ß√µes para uso externo
    NOTIFICATION_TYPES
};