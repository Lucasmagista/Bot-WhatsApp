const db = require('../utils/database');

/**
 * ðŸ“Œ Busca um serviÃ§o pelo nome ou tipo
 * @param {string} serviceType - Nome ou categoria do serviÃ§o
 * @returns {Promise<Object|null>} - Retorna o serviÃ§o ou null se nÃ£o encontrado
 */
const findByType = (serviceType) => {
    return new Promise((resolve, reject) => {
        db.get(`SELECT * FROM services WHERE name LIKE ? OR description LIKE ?`, [`%${serviceType}%`, `%${serviceType}%`], (err, row) => {
            if (err) {
                reject(err);
            } else {
                resolve(row);
            }
        });
    });
};

/**
 * ðŸ“Œ Retorna todos os serviÃ§os disponÃ­veis
 * @returns {Promise<Array>} - Lista de serviÃ§os
 */
const getAllServices = () => {
    return new Promise((resolve, reject) => {
        db.all(`SELECT * FROM services`, [], (err, rows) => {
            if (err) {
                reject(err);
            } else {
                resolve(rows);
            }
        });
    });
};

/**
 * ðŸ“Œ Adiciona um novo serviÃ§o
 * @param {string} name - Nome do serviÃ§o
 * @param {string} description - DescriÃ§Ã£o
 * @param {number} price - PreÃ§o estimado
 */
const createService = (name, description, price) => {
    return new Promise((resolve, reject) => {
        db.run(`INSERT INTO services (name, description, price) VALUES (?, ?, ?)`, [name, description, price], function (err) {
            if (err) {
                reject(err);
            } else {
                resolve(this.lastID);
            }
        });
    });
};

/**
 * ðŸ“Œ Atualiza um serviÃ§o existente
 * @param {number} id - ID do serviÃ§o
 * @param {string} name - Nome atualizado
 * @param {string} description - DescriÃ§Ã£o atualizada
 * @param {number} price - PreÃ§o atualizado
 * @returns {Promise<boolean>} - Retorna true se atualizado com sucesso
 */
const updateService = (id, name, description, price) => {
    return new Promise((resolve, reject) => {
        db.run(`UPDATE services SET name = ?, description = ?, price = ? WHERE id = ?`, [name, description, price, id], function (err) {
            if (err) {
                reject(err);
            } else {
                resolve(this.changes > 0);
            }
        });
    });
};

/**
 * ðŸ“Œ Remove um serviÃ§o pelo ID
 * @param {number} id - ID do serviÃ§o
 * @returns {Promise<boolean>} - Retorna true se removido com sucesso
 */
const deleteService = (id) => {
    return new Promise((resolve, reject) => {
        db.run(`DELETE FROM services WHERE id = ?`, [id], function (err) {
            if (err) {
                reject(err);
            } else {
                resolve(this.changes > 0);
            }
        });
    });
};

module.exports = {
    findByType,
    getAllServices,
    createService,
    updateService,
    deleteService
};
